/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.6/userguide/building_java_projects.html
 */

plugins {
    // Apply the groovy plugin to also add support for Groovy (needed for Spock)
    id 'groovy'

    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'

    id 'checkstyle'
    id 'jacoco'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}
configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

dependencies {
    // Use the latest Groovy version for Spock testing
    testImplementation 'org.codehaus.groovy:groovy:3.0.13'

    // Use the awesome Spock testing and specification framework even with Java
    testImplementation 'org.spockframework:spock-core:2.2-groovy-3.0'
    testImplementation 'junit:junit:4.13.2'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:31.1-jre'

    compileOnly 'org.projectlombok:lombok:1.18.26'
    annotationProcessor 'org.projectlombok:lombok:1.18.26'

    testCompileOnly 'org.projectlombok:lombok:1.18.26'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.26'

    implementation 'com.fasterxml.jackson.core:jackson-databind:2.11.1'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.11.1'

    //implementation 'org.springframework.boot:spring-boot-starter-web'

    //testImplementation 'org.springframework.boot:spring-boot-starter-test'

}

application {
    // Define the main class for the application.
    mainClass = 'pl.futurecollars.innvoicing.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}
jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                counter = 'BRANCH'
                minimum = 0.70
            }
        }
        rule {
            limit {
                counter = 'LINE'
                minimum = 0.70
            }
        }

/*
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: [
                        'pl/futurecollars/invoicing/db/*'
                ])
            }))
        }
*/

    }
}